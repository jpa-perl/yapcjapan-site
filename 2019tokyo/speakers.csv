id,title,description,talkTime,author,githubId,twitterId,blogUrl,timestamp,trackId,startAt
1,2019年冬のPerl,そろそろ概要が見えてきているであろうPerl 5.30や、この頃にはリリースされているであろうPerl 6の次期バージョン6.dについて、最新の状況を簡単にまとめていきます。,40min,charsbar,charsbar,charsbar,,2018/11/09,track-a,11:20
2,Perl5の静的解析入門　機械と人間双方の歩み寄りによる平和編,"""Only perl can parse Perl"" という言葉にもあるように、長年Perlスクリプトをperlコマンド以外が解析し、利用することは難しいことであると思われてきました。もちろんPPI.pmやperlapiを利用するソリューションもいくつかはありましたが、Perlを静的解析するアプローチはこれまであまり活用されて来なかったように思えます（筆者の視野内の感想です）。

このトークでは、主にDamian Conway氏の作ったPerlスクリプトを正規表現で解析するPPR.pmを用いて、Perlスクリプトの静的解析を行う話をします。具体例を挙げると、昨今のモダンな言語のコンパイラやlinterが備えているような機能を実装します。
また、人間が自由気ままにPerlスクリプトを書くと、機械が解析するのにも限界があります。他のプログラミング言語では人間側に型を書くことを強制させたり、その場で関数名を文字列で組み立てて呼び出しするのを禁止するなど、静的解析がしやすい言語デザインになっています。
Perlを書くときも安全安心なコードにするために静的解析を用いたい、そのためには人間側にも歩み寄りが必要です。このトークでは具体的な「静的解析がしやすいPerlスクリプトの書き方」についても提案します。

## こんな人に聞いてもらいたい

- Perlスクリプトを静的解析できないと思っている方
- ""Use of uninitialized value"" に対抗できる魔術がないか探している方
- 静的解析という言葉はわからないが、なにか惹かれるものを感じる方
- 静的解析がしにくい例を通じていかにPerlが人間中心のプログラミング言語であるかを感じたい方",40min,macopy,mackee,mackee_w,https://mackee.hatenablog.com/,2018/11/09,track-b,14:00
3,Perlでも分散トレーシングしたい！ - AWS::XRayによる解析とその実装,"皆さんマイクロサービスしてますか？

昨今のWebアプリケーションは、内部ネットワークにある DB や KVS へのクエリだけではなく、多数の外部サービスと通信する必要が増えてきています。外部への通信は往々にして不安定で、レイテンシやエラーの発生率も高いものです。

障害が発生した場合にその原因を追及したり、パフォーマンスに問題があるのでチューニングを行いたい場合には、これらの外部呼び出しの状況を可視化することが大変強力な手段になります。

AWS(Amazon Web Services) X-Ray は、外部リソースへの通信をモニタリングし、解析するためのマネージドサービスです。AWS 外で動作しているアプリケーションに対しても使用できます。残念ながら Perl 用の公式 SDK は提供されていないため、AWS::XRay 等のライブラリを実装し、CPAN で公開しました。

このトークでは、分散トレーシングの概要、AWS::XRay, Plack::Middleware::XRay による実際のアプリケーション(例として ISUCON8 本選の Perl 実装)を解析する手法、どのように AWS::XRay が実装されているかの解説を行います。

## 聞いてもらいたいかた
- マイクロサービスやるぞ！というかた
- Webアプリケーション(特に既存のPerl製のもの)のパフォーマンス解析がしたいかた
- グラフを眺めてニヤニヤするのが好きなかた
- Perl 用の SDK は提供されないことが多いけど頑張っていこう、というかた",40min,fujiwara,fujiwara,fujiwara,https://sfujiwara.hatenablog.com/,2018/11/09,track-a,15:40
4,ログにやさしいDB設計,"Webサービスには欠かせないログ。これまでお世話になった幾千のログに感謝しつつ、これからのログに報いるために（そして運用に関わる全てのエンジニアが少しでも幸せになれるように）ログフレンドリーなDB設計を紹介します。
本発表では、実際にFinTech系のサービスを開発する中で、ログにとって特に重要である「網羅性」「整合性」「追跡容易性」を高めるために設計を改善していった過程と、最終的に辿り着いた現時点でのベストオブ設計についてお話します。
トピックとしてCloud Datastore、Cloud SQL、Cloud Spannerについても取り上げる予定ですが、GCPに限定される内容ではありません。",20min,fist0,fisto,fist0,,2018/11/26,track-c,15:40
5,レガシーPerlビルド 〜現代に蘇るPerl[1..5].0とPerl6〜,"みなさんが今使用しているPerlのバージョンはいくつですか?5.24?5.28?はたまたPerl6...? 
互換性を大事にするPerlと言っても，みなさんが今動かしているPerlはPerl5以降のものかと思います．一部Perl4のプロジェクトがあるかもしれませんが...．
でも待ってみて下さい，なにか忘れていませんか...?

そうです．Perl""5""と言うことは，Perl1からPerl4がかつて存在していたという事です．もし，Perl2.0やPerl3.0のソースコードが目の前にあったら動かしてみたくなりませんか?

このトークでは過去のPerlのソースコードから，動きのしくみ，そして現代のosではどのようにすれば過去のPerlが動くのかについて解説します．
バージョンごとの特性や, C言語で書かれたPerl処理系のおもしろポイントと，年代別の修正ポイントも一気に見ていきます．
また, 実際にPerl1からPerl5,Perl6まで一気に走らせた場合どの様な処理速度の違いが出るのかなどについても紹介します．

対象とするのはPerl1から現在の主流であるPerl5,そしてレガシーと言いつつ最先端の(?)Rakudo Perl6です．
メインはPerl5までのPerlですが，Perl6の内部構造などについてもお話するかもしれません．

アジェンダ(仮):
- 歴代Perlの探し方
- 歴代Perlのビルド方法
- Perlのビルド方法の遍歴
- Perlの内部構造について
- Perl[1..6]のベンチマーク
- Perl::Buildでレガシーをbuildするには
- 一気に動かすPerl[1..6]",20min,八雲アナグラ,AnaTofuZ,AnaTofuZ,https://anatofuz.hatenablog.com/,2018/12/03,track-b,15:10
6,Wazuhを利用した大統一サーバ監査基盤,"昨今、WEBサービスを運用するにあたり、攻撃手法の高度化に伴いサーバの防御、脆弱性対応はもちろんのこと、有事を検知する監査の仕組みも注目されるようになってきました。

話し手が所属するGMOペパボでは、これまでのセキュリティ・インシデントの経験を糧にサーバ監査の仕組みやウィルス検知の仕組みの構築に力を注いでいます。
このセッションでは話し手が全社横断で取り組んできたサーバ監査の仕組みの構築、導入のノウハウや、実際の運用の勘所を踏まえて、知見を共有します。

なお、このセッションのトピックは下記のとおりです。
・Wazuh
・ClamAV
・DBクエリの保存",20min,山下和彦,pyama86,pyama86,https://pyama.fun,2018/11/12,track-c,14:20
7,綱渡りバッチ脱出大作戦,"わたしが関わっているサービスでは、つい最近までいわゆるバッチサーバーが冗長化されておらず、SPOFになっていました。また、バッチサーバーにジョブキューワーカーも同居しており、このサーバーが落ちるとバッチだけではなくオンラインのサービスの継続にも支障が出るような状況でした。さらに、このサーバーはアップタイムがすごいことになっており、いつ寿命を迎えてもおかしくありませんでした。さらにさらにさらに、このサーバーの構成管理スクリプトはメンテナンスされておらず、「1度死んだら2度とは立ち上がらないかもしれない……」という状態でした。しかもしかもしかもしかも、冗長化できない理由は技術的制約だけではなかったのです……。

本トークでは、そんな「綱渡り」状態でサービス提供したいた状況を脱却するにあたって

- どのような弊社独特の技術的制約と非技術的制約があったのか
- どのような技術スタックを検討してみたのか
- 結果としてどのような技術を選択したのか
- 実際にどのように移行を進めたのか

を赤裸々にお話できればと思います。",20min,しんぺい a.k.a. 猫型蓄音機,Shinpeim,shinpei0213,https://nekogata.hatenablog.com/,2018/11/14,track-c,14:00
9,型にはまらない型の話,"プログラミングの話をすると二言目には型(type)の話になるものですが、それでは型とは一体なんでしょう?楽に楽しく型について、時間の許す範囲でカタります。

* 型の意味=型は意味
* Typeは楽、Typingは楽しい
* Perl5が愛され嫌われる理由
* Perl6:楽土は楽か?
* 型推論=いいとこ取り?",20min,Dan Kogai,dankogai,dankogai,http://blog.livedoor.jp/dankogai/,2018/11/17,track-b,11:20
10,PerlプログラムでPerlプログラムを修正する方法,"PPIやPerl :: Criticなどのツールを使って、
Perlプログラムを変更するPerlプログラムを書くのが簡単になりました。
非自明なケースでは、ボットにコードレビューをさせることもできます。
",20min,Kang-min Liu,gugod,gugod,https://gugod.org,2018/11/20,track-b,14:50
11,実演 サーバレスPerl - 顔認識データを扱おう,"## このトークについて

最近よく耳にする「サーバレス」という言葉ですが、Perlとはあまり縁のない話に感じているのではないでしょうか。

このトークでは、Microsoft Azure Functionsを駆使してPerlを動かし、顔認識データを取り扱うまでの流れをライブコーディングしながら解説していきます。

## このような方にオススメ

* Perlとサーバレスの組み合わせを実際に目の当たりにしたい方。
* サーバやVMのお守りから、ひととき、フォーカスを外したい方。
* 最小限のモジュールでできる事の一端を垣間見たい方。

## トーク内容の難しさ

Microsoft Azureの概念について、若干難易度があるかもしれませんが、Perlについて詳しい必要はありません。

プログラミング経験のない方にはわかりにくい側面があります。

## その他

ライブコーディングで20分というのは非常に短いですので、かなりスピーディな発表となる可能性があります。",20min,わいとん,ytnobody,ytnobody,https://ytnobody.net,2018/11/20,track-b,16:00
12,Perl 6 でのアプリケーション開発と実用,"Perl 6 で CLI のアプリケーションを自作して、常用するようになるまでの経験をベースに、最近の Perl 6 の状況や Perl 6 でのプログラミングへの入門に参考になりそうな事柄を整理してお話します。
以下のような内容を想定しています。
* 環境構築
* モジュールの扱い方
* CLI アプリケーションの開発
* 入門に適したサイトの紹介",20min,risou,risou,risou,blog.risouf.net,2018/11/21,track-b,11:40
14,10年モノ熟成Perlその後,"2年前の YAPC::Hokkaido 2016 で「10年モノ熟成Perlとの付き合い方」というタイトルで、Perlで書かれた10年選手のシステムを運用するにあたり、現状認識・歴史理解・問題発生・課題解決といったことをどうやっているかというお話をしました。

そこから2年の月日が流れ、システムを取り巻く環境で変わったことと変わらないこと、自分自身のシステムやサービスに対する理解度と考え方の変化、最近のシステムとの付き合い方、そしてさらに今後の展望など、実体験から得られたことを交えて、自分とシステムの2年分のアップデートをお話します。",20min,ikasam_a,masaki,ikasam_a,,2018/11/22,track-b,16:50
15,多くのCPAN Authorに育てられ、息をするようにCPANモジュールを書けるようになり、そして分かったこと,"私は、Perlコミュニティに育てられ、一角のエンジニアとなることができました。

多くのCPAN AuthorからOSSの作法を学び、CPANやGitHubで泳げるようになりました。そして数多くのCPANモジュールを作成しました。その経験は現在、他の言語でツールやモジュールを作る上でも活かされています。

その経験を踏まえ、私が気づいたことや学んだことについて話します。またそれらの経験が今の業務にどの様に活かされているか、OSSをどの様に仕事に活用していくか、などについても取り上げます。

具体的には以下のようなトピックを取り上げます。

- OSSコミュニティがどの様に成長し、どの様に人を育てるのか、
- 「普通の」エンジニアがOSSに貢献する方法や
- 良い車輪の再発明、悪い車輪の再発明
- OSSフリーライダー問題
- 業務でどうOSSに関わるか
- エンジニア向けSaaSを運営する上で、どの様にOSSを戦略的にやるか",20min,Songmu,Songmu,songmu,http://www.songmu.jp/riji/,2018/11/25,track-a,16:50
19,チームが前に進み続けるために僕たちが考えたこと,"""モノをつくる""という過程において, 常に順風満帆であり続けることはないでしょう.
何か調子が良くない, 何故かうまくいかない. チームとして前に進めていない... そう感じる時があるかもしれません.

まさに自分が, 所属しているチームでそういった雰囲気を感じ始めた時, チャレンジしたのが｢スクラム｣でした.
エンジニアとスクラムマスターを兼業し, スクラムの導入によって, チームが前に進み続けられるよう, 試行錯誤を始めました.

このトークでは, 業務の中で直面した課題や壁に対して, スクラムを導入してどのように立ち向かっていったのか,
そしてそれによって, チームがどう変わって, それに伴ってスクラムの様子がどう変わっていったのかを軸に, 今所属しているチームにおけるスクラムの様子を, ありのままにお伝えします.

具体的には, 以下のような話題が含まれる予定です:

- 感じていた停滞感
- スクラムを導入するまでのアクション
- スクラムイベントのご紹介 〜はてなブログMediaチームの場合〜
- スクラム導入の成果
- スクラムでチームが変わって, チームがスクラムを変えていく
- ｢ゴールを目指す｣スクラムと｢前に進み続ける｣スクラム
- 自分たちの今後の展望と課題

兼業スクラムマスターが孤軍奮闘している一事例として, お聞き頂けると幸いです.",20min,papix,papix,__papix__,https://papix.hatenablog.com/,2018/11/27,track-c,11:20
20,WebVRで作品を作って展示しよう,"発表者は普通のウェブ技術者ですが、近年のVR化の波に呼応して、日々VRコンテンツを作って遊んでいます。
ここ半年ほどでいくつかWebVRを使った作品を作ってきました。
先日は「メディアを問わず、どんな本でも購入できる」がコンセプトのブックフェア「TRANS BOOKS」にて自著を販売すると共にVRコンテンツを展示し、来場した老若男女に遊んでもらいました。
ここ半年ほどの活動から、ウェブ技術者に向けた知見をお話します。

## アジェンダ
- WebVRについて、フレームワークや開発方法について、これまでに作ったものを交えながら紹介
- 普通のウェブ空間から連続的にVR空間に向かうためのアプローチ
- デバイスを安定して展示するためのノウハウ
- 物理的な展示におけるグロースハック

## このトークのゴール
- WebVRを使ったVR作品を今すぐ作れるようになる
- WebVRを使ったVR作品をイベントで展示できるようになる",20min,hitode909,hitode909,hitode909,https://blog.sushi.money,2018/11/27,track-b,15:40
26,ISUCON8予選問題作成の裏側,"ISUCONとはIikanjini Speed Up CONtestの略で、アプリケーションからOSレイヤまでなんでもありのWebアプリケーションの総合的な高速化スキルを競うコンテストです。2018年で第8回目の開催となり、参加者数は1000人を超えます。本年度の出題はDeNAとカヤックでした。僕はDeNAのエンジニアの一人としてISUCON8予選の問題作成に携わりました。

ISUCONの問題の提供のためには、参照実装（具体的な問題）の作成、ベンチマーカーの作成、競技を成立させるための最低限の制約であるそしてそれが十分に高速化できることを示すための模範解答の作成が必要です。ISUCON8の予選問題はPerlで最初に参照実装が作成されました。そして、模範解答も実はPerlで作成されています。そして、その参照実装が各言語へ移植されて競技で各言語ごとに様々なチューニングが行われました。

その過程で様々な学びを得ました。たとえば、ISUCONのような競技で気を遣うべきポイントはなにか、どのようにして問題を考えていくと良いのか、どのようにしてブラックボックスとなっているアプリケーションが仕様を満たしているかをテストするとよいのか。極限までチューニングする上でどのようにプロファイリングするとよいのか。他言語移植においてどのようなポイントで問題が起きるのか。などといったものです。

このセッションではISUCON8予選問題の作問の過程から、どのような学びを得たかについて語ります。",20min,karupanerura,karupanerura,karupanerura,https://techblog.karupas.org/,2018/12/02,track-a,16:30
28,私とOSS活動とPerl,"私とPerlとの出会いは大学院です。専門は生命科学だったため当時はモジュールといった知識もなく、複数のスクリプトをパイプで繋ぐといったことしていました。

新卒で入社した会社は主にJavaで開発していました。そこで知識を得たオブジェクト指向を取り入れ、Perlでのモジュール開発をはじめました。

私の初めてのカンファレンス参加は YAPC::Asia Tokyo 2015 でした。発表者が皆いきいきとしていたことを覚えています。その後、GitHubと出会い個人開発したソースコードの公開をはじめました。

初めてStarを頂いたGitHubのリポジトリは、CPANで公開したPerlのモジュールでした。初めて Issue や Pull Request も頂きました。
初めての転職の際には、そのリポジトリが決め手となり内定を頂くことができました。

以降、少しずつOSS活動をしており現在はGolangでCIを個人開発しています。開発中のリポジトリでは JetBrainsの OSS License が承認されました。
IntelliJ IDEA では 非公式ですが強力な Perl Plugin があり、Perlでの開発にも役立ちます。

そんな取り留めのない「私とOSS活動とPerl」のお話を通じてOSS活動の魅力をお伝えしたいと思います。",20min,前田隼輔,duck8823,duck8823,http://blog.duck8823.com/,2018/12/03,track-c,11:40
31,Dive into MySQL Error,"- MySQLのエラーコードについてのお話です
- MySQLのエラー番号には一定のルールがあり、それを知ることでピンチの時の切り分けに役立つかも知れません
- また、エラーログドリブンでMySQLのソースコードを読むきっかけを作る話もします",40min,yoku0825,yoku0825,yoku0825,https://yoku0825.blogspot.com/,2018/12/03,track-c,16:30
38,CPAN Module Hacks,"CPANモジュール使っていますか。アプリケーションの依存モジュールをどのように管理するべきなのか迷ったことがありますか。CPANにモジュールをpublishしようと思って放置していることはありますか。
このトークではCPANモジュールの作成から公開、そして管理まで以下の項目を元にお話しします。

- metacpanの歩き方
- CPANにモジュールをpublishする
- Carton/cpmでパッケージ管理
- cpanfile.snapshotの生成に立ち向かう
- Amazon S3におくだけのプライベートCPANを作る
- cpan-auditで脆弱性のあるモジュールを検査する",20min,akiym,akiym,akiym,https://blog.akiym.com/,2018/12/03,track-c,16:00
39,自前運用のZabbixからマネージド監視サービスMackerelへ - ソーシャルゲームタイトルのサーバ監視の移行事例,"弊社ではZabbixでサーバ監視を行ってきましたが、自前運用のZabbixサーバにかかる運用コストが問題になっていました。
この問題をマネージドなサーバ監視サービス Mackerel の導入によって解決しようとしています。

本トークではそれらの取組のうち、自社ソーシャルゲームタイトル「僕らの甲子園ポケット（以下ぼくポケ）」におけるZabbixからMackerelへのサーバ監視の移行事例について話をさせていただければと思います。

具体的には以下のような内容となる予定です
- 監視・メトリクスの移植
- アラートではないが通知はほしいケースへの対処方法
- Mackerelならではの便利な機能
- オートスケールやプロビジョニングとmackerel-agentをうまく付き合わせるための工夫
- 本家のrepoへPRを送って積極的に改善していく
- github.com/ryotarai/waker と連携したアラートエスカレーション
- 自作プラグイン・ツールを利用した柔軟な監視
- サーバ以外の監視: アラート通知の変更を通知して誤操作に気づけるようにする
- mackerelをservice discoveryとして活用して深刻な障害時に緊急メンテを入れる",40min,suzuki,dozen,jet_zousan,,2018/12/03,track-c,14:50
40,Perl to Go,"Perl を仕事で10年ぐらい書いていていろんな Web API 作って来たおじさんが、Go で Web API を書いた時の奮闘記です。

Perl と Go は全く違う言語に思うかもしれませんが、意外と似ているところもあったりします。
実際にPerl で使っているさまざまなエッセンスを Go でも活用できたりします。

このトークでは Perl と Go の相違点や類似点を交えながら、認証機構やデータベースを用いた本格的な Web API を書く上でのポイントや便利なライブラリを紹介します。
また、Web API といえば Test が書きやすいということで書かずにはいられませんね。Go での Test 手法についても例を交えながら紹介したいと思います。

このトークを聞けば明日から Go をスラスラと書けるようになること請け合いです。",40min,xaicron,xaicron,xaicron,https://xaicron.hatenablog.com/,2018/12/03,track-a,12:10
43,レガシーPerlと、Perlのこれから,"自分のPerlとの出会いとこれからのPerlとの付き合い方について、
古くからのシステムの当時を振り返りながら、
懐かしの話や失敗談なども踏まえつつ、これからのPerlの付き合い方について考えようと思います。

- Perlとの出会い
- WEB 2.0時代
- ガラケー時代
- CGI/mod_perl/Plack
- 当時の失敗談（UTF-8フラグなど）
- ワンライナー
- レガシー環境とPerl
- DockerでPerlを小さく使う
- クラウド時代のPerl
- テキスト処理言語としてのPerl
",20min,teckl,,teckl,https://dev.teckl.net/,2018/12/18,track-b,16:30
44,メッセージングのプロトコル,2010年前後、メッセージングの標準規格であるXMPPプロトコルを利用するためのフレームワーク、Perl Oceanを開発しました。(参考: https://alpha.mixi.co.jp/entry/2012/11135/)  また、2017年になり、再度メッセージングサービスを設計する機会を得ることが出来ましたが、このときは標準規格であるXMPPは採用せず、独自のプロトコルでの設計を行いました。サーバー実装の言語はElixirです。これらの経験から得られた知見として、標準としてのXMPPの概要、そして、いまやレガシーとなってしまい現代の要件に合わない部分を合わせて解説し、これからのサービス開発でメッセージング機能が必要になった際の、設計の指針とできる情報を提供できればと思います。,40min,加藤亮,lyokato,lyokato,https://medium.com/@lyokato,2018/12/03,track-c,12:10