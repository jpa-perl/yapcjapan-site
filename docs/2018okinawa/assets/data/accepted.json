{"feed":{"entry":[{"gsx$talktime":{"$t":"40min"},"gsx$description":{"$t":"Perl 5.28で入る新機能の紹介などのPerlの最新情報や、現在のPerl 5/6の状況を簡単にまとめていきます。"},"gsx$title":{"$t":"2018年春のPerl"},"gsx$twitterid":{"$t":"karupanerura"},"gsx$timestamp":{"$t":"2017/11/29"},"gsx$startat":{"$t":"15:10"},"gsx$githubid":{"$t":"karupanerura"},"gsx$id":{"$t":"1"},"gsx$trackid":{"$t":"track-a"},"gsx$author":{"$t":"karupanerura"},"gsx$blogurl":{"$t":"http://techblog.karupas.org/"}},{"gsx$trackid":{"$t":"track-b"},"gsx$blogurl":{"$t":"http://rnitame.hatenablog.com"},"gsx$author":{"$t":"仁多見 遼"},"gsx$id":{"$t":"4"},"gsx$startat":{"$t":"10:50"},"gsx$githubid":{"$t":"rnitame"},"gsx$twitterid":{"$t":"bird_tummy"},"gsx$title":{"$t":"GraphQL をプロダクション導入した結果"},"gsx$timestamp":{"$t":"2017/12/17"},"gsx$talktime":{"$t":"40min"},"gsx$description":{"$t":"REST API にとって変わるんじゃないかと言われている GraphQL ですが（おそらく初めて！）クローズドβではありますがプロダクション導入しました。\n\nこのトークでは以下のことについて触れられればと思います。\n\n- そもそも GraphQL ってなんだっけ？\n- GraphQL のサーバ / クライアントそれぞれの実装方法について\n- パフォーマンス面について（キャッシュとか）\n- テストってどうやって書くの？\n\n今後 GraphQL を導入しようと考えている方、導入直後の方の参考になれば幸いです。"}},{"gsx$githubid":{"$t":"papix"},"gsx$id":{"$t":"5"},"gsx$startat":{"$t":"10:00"},"gsx$blogurl":{"$t":"http://papix.hatenablog.com/"},"gsx$author":{"$t":"papix"},"gsx$trackid":{"$t":"track-b"},"gsx$description":{"$t":"Webサービスを開発し, 運用していると, 様々な出来事が生じます.\n何らかの要因によるリクエスト数の上昇があったり, サーバーやネットワークの疎通が急に止まったり, 或いは利用している外部サービスで障害が発生したり...\nそういった時に, サービスの異常事態にいち早く気付き, 迅速に対応するためには, Webサービスをしっかりと｢監視｣していくことが重要です.\n\n本トークでは, Webサービスの｢監視｣と｢通知｣そして｢対応｣という3つの視点から, ｢Webサービスを運用していく｣ことについて考察します.\nその中で, ｢監視｣と｢通知｣を実現する道具として, 株式会社はてなが提供するサーバー監視SaaS｢Mackerel｣を題材とする予定です.\nまた, ｢はてなブログ｣を題材とした, Mackerelを利用したWebサービス監視の実情などもお話出来ればと思っています.\n\n具体的には, 以下のような話題が含まれる予定です:\n\n- なぜ｢監視｣が必要なのか?\n- サービスに這い寄る障害達\n- ｢監視｣と｢通知｣と｢対応｣の車輪を回そう\n- どこまで通知する? 〜狼少年にならないために〜\n- Mackerelを活用したWebサービスの監視\n- Webサービスの監視の現場 〜はてなブログの場合〜\n\nこのトークをきっかけに, ｢Webサービスの監視｣について, 皆さんと一緒に理解を深められると嬉しいです."},"gsx$talktime":{"$t":"40min"},"gsx$timestamp":{"$t":"2017/12/28"},"gsx$twitterid":{"$t":"__papix__"},"gsx$title":{"$t":"Webサービスを監視するときに僕達が考えたこと"}},{"gsx$startat":{"$t":"14:20"},"gsx$githubid":{"$t":"mackee"},"gsx$author":{"$t":"macopy"},"gsx$blogurl":{"$t":"http://mackee.hatenablog.com/"},"gsx$trackid":{"$t":"track-a"},"gsx$talktime":{"$t":"40min"},"gsx$title":{"$t":"High (Availability|Performance) WebSocket for Perl Real-Time Application"},"gsx$id":{"$t":"6"},"gsx$description":{"$t":"実は難しい大規模WebSocketサーバ、だけれどミドルウェアとアプリの役割を分離すればうまくいくよって話をします。\n\nこのトークでは、WebSocketをスケール可能にし、従来のPerl製Webアプリケーションからも容易に扱うために生まれたOSSミドルウェア「kuiperbelt」を通して得られた知見や、リアルタイム通信を含んだゲームアプリに適用する際のハードルや解決方法について話していきます。\n\nこのトークの対象者\n* PerlやRubyなどのPrefork型アーキテクチャだけれどWebSocketを簡単に扱いたい\n* どの部分を切り出してマイクロサービスとして適用するとうまくいくかを知りたい\n\nこのトークで話さないこと\n* kuiperbeltのGo特有の苦労したことあれこれ\n\nこのトークでは以下の内容が含まれます。\n* 永続的接続に対するPrefork型アプリケーションの限界\n* なぜkuiperbeltはPerlアプリケーションのために生まれてきたか\n* プロセスを分離してデプロイやスケールイン時にも切断しない方法\n* WebSocketサーバの先行研究と比較\n* 土管としてのミドルウェア, コアを小さく周辺ミドルウェアを増やす戦略"},"gsx$timestamp":{"$t":"2017/12/18"},"gsx$twitterid":{"$t":"mackee_w"}},{"gsx$trackid":{"$t":"track-b"},"gsx$author":{"$t":"門松宏明"},"gsx$blogurl":{"$t":"http://note103.hateblo.jp/"},"gsx$githubid":{"$t":"note103"},"gsx$id":{"$t":"10"},"gsx$startat":{"$t":"15:10"},"gsx$title":{"$t":"ノンプログラマーのプログラミング活用法 / The Non-Programmer's Programming Techniques"},"gsx$twitterid":{"$t":"note103"},"gsx$timestamp":{"$t":"2017/12/26"},"gsx$talktime":{"$t":"40min"},"gsx$description":{"$t":"# TL;DR\n- プログラミングを職業としない人（ノンプログラマー／非エンジニア）がプログラミングの基礎を習得すると、普段の仕事がどうなるのかを紹介します。\n\n# I. 概要\n- 日々の様々な雑事を効率化するには、プログラミングの技術が役立ちます。\n- たとえば、ターミナルでカレントディレクトリを移動したり、findでファイルを探したり、grepで任意のディレクトリ下のファイルから特定の文字列を検索したり。\n- こういった技術は、プログラミングをする人にとっても勿論有用だと思われますが、たとえば編集者やライター、あるいは事務方のような、プログラミング以外の仕事をする人にも大いに役立つものでしょう。\n- しかし従来、そうした「プログラミング以外の場でも使える、プログラミングの技術」を生み出し、伝道してきたのはプログラマーの人々であり、またそれゆえに、そうした技術がノンプログラマーに伝わる機会も限られたものであったと思われます。\n- 一方、普段編集の仕事をしている私は、趣味としてプログラミングを学ぶ中で、そうした技術を自分なりに身につけてきました。そこで実践されているノウハウは、プログラマーが行うそれに比べれば稚拙で、非効率なものかもしれませんが、それでもそのような立場だからこそ、プログラマーとノンプログラマーとの間に立つ技術を伝えられるのではないかと考えています。\n- 今回のトークでは、そうした観点から、DEMOなどを通してなるべく具体的な事例を紹介していきたいと思います。\n\n# II. 対象聴者\n- 「ノンプログラマーがプログラミングを学ぶことで、普段の作業をどのように効率化できるのか」を示すという意味で、ノンプログラマーに役立つ内容になると思います。\n- ノンプログラマーがプログラミングの技術を用いて普段の仕事をする様子は、プログラマーの人にとっても新鮮な内容になるかもしれません。\n\n# III. おもなトピック（候補／以下を軸に適宜構成します）\n## 第1部 シェル（bash）\n- ターミナルを使うと何ができるのか\n- .bashrcにエイリアスを設定する\n- 関数の作り方、Perlとの連携\n- bashで作った自分のツール\n\n## 第2部 Vim\n- 二つの文章の差分を迅速明快にチェックする\n- 編集時に生じた不要な文章や段落を画面分割で作った一時退避場所に仮置きする\n- IDE的画面構成を用いて、離れたチャプターやセクション間を自在に移動する\n- その他の便利なプラグイン\n\n## 第3部 Perl\n- Perl入学式で基礎文法を学ぶ\n- Perlの基礎でできること（オブジェクト指向以前）\n- シェルとの連携\n- リファレンスの理解法\n- モジュールをuseする\n- くり返し練習する方法\n- Perlで作った自分のツール\n\n## 第4部 Excel / Google Spreadsheet\n- Perlで学んだ知識を活かす\n- Excel関数でできること"}},{"gsx$startat":{"$t":"14:20"},"gsx$githubid":{"$t":""},"gsx$id":{"$t":"12"},"gsx$trackid":{"$t":"track-b"},"gsx$blogurl":{"$t":""},"gsx$author":{"$t":"teckl"},"gsx$talktime":{"$t":"20min"},"gsx$description":{"$t":"日々運用・開発をしている中で知っているとすぐにでも役に立つワンライナーについて、\nPerlを中心として入門的なところからネタ的なシェル芸まで薄く紹介できればと思います。（まだ内容未定です。。）\n\n## 対象者\n- ワンライナーを余り使っていない方\n- CUI（シェル）をこれから使っていきたい方\n\n## 話す内容\n- 実用的なワンライナー集\n- UNIXという考え方\n- 簡単レシピ\n- ログ解析\n- 運用成分多め\n- ネタ的なものが出来れば\n- 時間が余ればPerl入学式企業出張版（in シーサー株式会社）の報告なども？"},"gsx$twitterid":{"$t":"teckl"},"gsx$title":{"$t":"Perlを中心としたワンライナーあれこれ"},"gsx$timestamp":{"$t":"2017/12/28"}},{"gsx$twitterid":{"$t":"t_snzk"},"gsx$title":{"$t":"MogileFS脱出大作戦"},"gsx$timestamp":{"$t":"2017/12/28"},"gsx$talktime":{"$t":"40min"},"gsx$description":{"$t":"自前運用のMogileFSに保存された1600000000個のファイルをAmazon S3へ移行する話をします。移行の際考慮すべきことや方法論、ハマりどころ、要求されるマインドなどをお話したいと思います。"},"gsx$trackid":{"$t":"track-b"},"gsx$blogurl":{"$t":"http://blog.yux3.net/"},"gsx$author":{"$t":"t_kyt"},"gsx$startat":{"$t":"13:30"},"gsx$id":{"$t":"13"},"gsx$githubid":{"$t":""}},{"gsx$timestamp":{"$t":"2017/12/28"},"gsx$twitterid":{"$t":"xaicron"},"gsx$title":{"$t":"そろそろPerlでのHTTP/2について触れたい"},"gsx$description":{"$t":"HTTP/2のRFCが文書化されてから幾ばくかのときが流れました。\nしかし、PerlでHTTP/2を使ってるよ〜んって話をあんまり聞きません。（個人の感想です）\nメリットが無いのでしょうか？\nこのトークではHTTP/2の基本的なことをざっくりと話しつつ、Perlで実際にHTTP/2を使うにはどうすればいいのかを解説します。\nまた、実際にどういった場面で利用するとよいのか。メリット・デメリットを考察します。\n最後に、余力があればPerlでgRPCを利用する方法について検討したいと思います。"},"gsx$talktime":{"$t":"40min"},"gsx$blogurl":{"$t":"http://xaicron.hatenablog.com/"},"gsx$author":{"$t":"xaicron"},"gsx$trackid":{"$t":"track-a"},"gsx$githubid":{"$t":"xaicron"},"gsx$startat":{"$t":"11:40"},"gsx$id":{"$t":"14"}},{"gsx$id":{"$t":"15"},"gsx$startat":{"$t":"16:00"},"gsx$githubid":{"$t":"moznion"},"gsx$trackid":{"$t":"track-b"},"gsx$blogurl":{"$t":"http://moznion.hatenadiary.com/"},"gsx$author":{"$t":"moznion"},"gsx$talktime":{"$t":"20min"},"gsx$description":{"$t":"みなさんPerlを使っていますか？　使っていますね．\nとはいえそこそこ規模感のあるプロジェクトをやっているとPerlだけで完結するという状況は珍しいでしょう．多くの場合は何らか他の言語とのつなぎ込みが必要となります．\nあるいはPerlが得意ではない処理をなんとかする必要に迫られるというシチュエーションもあると思います．例えば数値解析とか……\n\nそういう時に我々はどうすべきか？\nもちろんInline::*ですね．\n\nPerlにはPerlコード中に他の言語を埋め込んで実行するInlineモジュールという魔法が存在します．例えばPerlのコード中にPythonコードを埋め込んで，Perlのランタイムで実行するということが可能となるのです．これだけ聞くとまるで使い物にならない，おもちゃのような機能のようにも思えるかもしれませんが，じつは実用性のある素晴らしい機能なのです！\n本トークではデモを交えながらのInlineモジュールの紹介・解説を行い，ならびにグルー言語としてのPerl5，Perl6の可能性について論じたいと考えています．"},"gsx$twitterid":{"$t":"moznion"},"gsx$title":{"$t":"Inlineモジュールの世界"},"gsx$timestamp":{"$t":"2017/12/28"}},{"gsx$timestamp":{"$t":"2017/12/28"},"gsx$title":{"$t":"Perlコーディングテクニック2018"},"gsx$twitterid":{"$t":"akiym"},"gsx$description":{"$t":"Perlを幸せに扱うべく、ハマりポイントを回避するためのコーディング規則や最近のイケているモジュールを使ったり、IDE的支援が受けられないPerlでリファクタリングを行う方法など、2018年におけるモダンなPerlを書くテクニックを紹介します。\n\n- Perlハマりポイントn選\n- クラスビルダをふりかえる\n    - Moo, Mouse, ...\n- Type::Tinyを使って型を使う\n    - Smart::Args::TypeTiny, Params::ValidationCompiler\n- 近代的export術\n- クラスローダー\n- Crypt::OpenSSL::RSAにさよなら\n- 2017年のattribute\n- 新しいPerlの機能を使う\n    - postfix dereference\n- リファクタリング\n    - App::PRT\n    - PPIを使ってリファクタリングツールを作る"},"gsx$talktime":{"$t":"20min"},"gsx$author":{"$t":"akiym"},"gsx$blogurl":{"$t":"http://akiym.hateblo.jp/"},"gsx$trackid":{"$t":"track-b"},"gsx$id":{"$t":"16"},"gsx$startat":{"$t":"16:25"},"gsx$githubid":{"$t":"akiym"}},{"gsx$githubid":{"$t":"xtetsuji"},"gsx$startat":{"$t":"14:40"},"gsx$id":{"$t":"17"},"gsx$blogurl":{"$t":"http://post.tetsuji.jp/"},"gsx$author":{"$t":"OGATA Tetsuji"},"gsx$trackid":{"$t":"track-b"},"gsx$description":{"$t":"PHP を中心に起こったCMS戦国時代も、WordPress がデファクトスタンダードとなったことにより落ち着きを取り戻しました。\n\nITエンジニアが手軽にブログを開設しようとした場合、機能豊富な ASP ブログサービス、そして MovableType や GitHub Pages を利用した静的ウェブホスティングが無難な選択肢となることが多いでしょう。しかし、デザイナー主体で機能やデザインにこだわったブログを作成する場合、デザイナー側から見てノウハウが豊富な WordPress が第一候補として取り上げられることもよくある光景です。\n\n動的生成の WordPress は、セキュリティや過負荷といった悩み事を抱えやすく、ときにITエンジニアから忌避されるアプリケーションでもあります。ただ、デザイナーの意見を尊重して一緒に素晴らしいブログサイトの作成をお手伝いするのも、ITエンジニアとしてやりがいのある仕事だと感じます。\n\nこのトークでは、パフォーマンス・セキュリティ・スケーラビリティの3つの観点から、CMS の WordPress をAWS クラウド上に構築するための手法を探っていくことにします。\n\nもちろん WordPress は PHP 製であり、また AWS は Perl の API ライブラリを公開していません。それでも、だいたいどこにもインストールされていて、各種ツールを糊のように気軽にくっつけて連携できることは Perl の魅力といえるでしょう。\n\n奇をてらった構成ではなく、至極オーソドックスな構成のご紹介となりそうですが、その中で「ベターシェルスクリプト」「Glue 言語」としての Perl から、これは Perl ならではと膝を打ってしまうことまで、ご紹介できればと考えています。"},"gsx$talktime":{"$t":"20min"},"gsx$timestamp":{"$t":"2017/12/28"},"gsx$twitterid":{"$t":"xtetsuji"},"gsx$title":{"$t":"WordPress運用を支えるPerl"}},{"gsx$description":{"$t":"Before AI, before movies, before pictures, even before text.  Numbers are what we use computers for.  If so why is it *the least* portable data type?\n\n* `0.1+0.2 != 0.3` -- is it really true?\n* What's '%a'? Why should you care?\n* What does [VALU] has to do with it?\n* JSON,  What's wrong with you?\n* Perl does numbers.  But do you have any idea how funny it does?\n* Perl 6, the newest hope, the latest disappointment\n* …\n\n[VALU]: https://valu.is"},"gsx$talktime":{"$t":"20min"},"gsx$timestamp":{"$t":"2017/12/28"},"gsx$twitterid":{"$t":"dankogai"},"gsx$title":{"$t":"Everything You Always Wanted to Know About Numbers But Were Afraid to Ask"},"gsx$startat":{"$t":"17:15"},"gsx$githubid":{"$t":"dankogai"},"gsx$id":{"$t":"18"},"gsx$blogurl":{"$t":"http://blog.livedoor.jp/dankogai/"},"gsx$author":{"$t":"Dan Kogai"},"gsx$trackid":{"$t":"track-b"}},{"gsx$title":{"$t":"全部Perlが教えてくれたこと"},"gsx$twitterid":{"$t":"k_nishijima"},"gsx$timestamp":{"$t":"2017/12/28"},"gsx$talktime":{"$t":"40min"},"gsx$description":{"$t":"このトークでは、Perlから教えてもらったオープンソースやコミュニティといったものへの関わり方、それを広めていく方法などを交え、沖縄のITコミュニティの現状をお伝えするとともに、若いエンジニアたちへの声援を送りたいと思います（オサーンは多分聞いても面白くないと思います！）。"},"gsx$trackid":{"$t":"track-b"},"gsx$author":{"$t":"西島 幸一郎"},"gsx$blogurl":{"$t":"https://medium.com/@k_nishijima"},"gsx$githubid":{"$t":"k-nishijima"},"gsx$id":{"$t":"19"},"gsx$startat":{"$t":"11:40"}},{"gsx$id":{"$t":"20"},"gsx$timestamp":{"$t":"2017/12/28"},"gsx$twitterid":{"$t":"shoichikaji"},"gsx$description":{"$t":"2015年クリスマス、Perl6がリリースされました。\nリリース当初、モジュール管理は https://github.com/perl6/ecosystem にて行われていました。そこにPull Requestベースでモジュールが追加され、インデックスを作っていたのです。\n\nそれが2017年には、モジュールの配布場所はgithubからPAUSE/CPANへ、\nインストーラーはpandaからzefへ、それぞれ移ってきています。\n\n本トークではこうしたPerl6エコシステムの現状をお伝えしたいと思います。"},"gsx$author":{"$t":"Shoichi Kaji"},"gsx$blogurl":{"$t":""},"gsx$trackid":{"$t":"track-b"},"gsx$startat":{"$t":"16:50"},"gsx$githubid":{"$t":"skaji"},"gsx$title":{"$t":"Perl6のエコシステム"},"gsx$talktime":{"$t":"20min"}},{"gsx$description":{"$t":"HTTP/2についての正しい理解と残された課題について解説します"},"gsx$talktime":{"$t":"40min"},"gsx$timestamp":{"$t":"2017/12/29"},"gsx$title":{"$t":"HTTP/2にまつわる事実と誤解"},"gsx$twitterid":{"$t":"kazuho"},"gsx$githubid":{"$t":"kazuho"},"gsx$id":{"$t":"22"},"gsx$startat":{"$t":"10:50"},"gsx$author":{"$t":"Kazuho Oku"},"gsx$blogurl":{"$t":"http://blog.kazuhooku.com/"},"gsx$trackid":{"$t":"track-a"}}]}}
