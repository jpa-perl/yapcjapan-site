{"feed":{"entry":[{"gsx$author":{"$t":"charsbar"},"gsx$trackid":{"$t":"track-a"},"gsx$title":{"$t":"2019年冬のPerl"},"gsx$githubid":{"$t":"charsbar"},"gsx$talktime":{"$t":"40min"},"gsx$description":{"$t":"そろそろ概要が見えてきているであろうPerl 5.30や、この頃にはリリースされているであろうPerl 6の次期バージョン6.dについて、最新の状況を簡単にまとめていきます。"},"gsx$twitterid":{"$t":"charsbar"},"gsx$id":{"$t":"1"},"gsx$startat":{"$t":"11:20"},"gsx$timestamp":{"$t":"2018/11/09"},"gsx$blogurl":{"$t":""}},{"gsx$twitterid":{"$t":"mackee_w"},"gsx$id":{"$t":"2"},"gsx$blogurl":{"$t":"https://mackee.hatenablog.com/"},"gsx$timestamp":{"$t":"2018/11/09"},"gsx$startat":{"$t":"14:00"},"gsx$author":{"$t":"macopy"},"gsx$title":{"$t":"Perl5の静的解析入門　機械と人間双方の歩み寄りによる平和編"},"gsx$trackid":{"$t":"track-b"},"gsx$description":{"$t":"\"Only perl can parse Perl\" という言葉にもあるように、長年Perlスクリプトをperlコマンド以外が解析し、利用することは難しいことであると思われてきました。もちろんPPI.pmやperlapiを利用するソリューションもいくつかはありましたが、Perlを静的解析するアプローチはこれまであまり活用されて来なかったように思えます（筆者の視野内の感想です）。\n\nこのトークでは、主にDamian Conway氏の作ったPerlスクリプトを正規表現で解析するPPR.pmを用いて、Perlスクリプトの静的解析を行う話をします。具体例を挙げると、昨今のモダンな言語のコンパイラやlinterが備えているような機能を実装します。\nまた、人間が自由気ままにPerlスクリプトを書くと、機械が解析するのにも限界があります。他のプログラミング言語では人間側に型を書くことを強制させたり、その場で関数名を文字列で組み立てて呼び出しするのを禁止するなど、静的解析がしやすい言語デザインになっています。\nPerlを書くときも安全安心なコードにするために静的解析を用いたい、そのためには人間側にも歩み寄りが必要です。このトークでは具体的な「静的解析がしやすいPerlスクリプトの書き方」についても提案します。\n\n## こんな人に聞いてもらいたい\n\n- Perlスクリプトを静的解析できないと思っている方\n- \"Use of uninitialized value\" に対抗できる魔術がないか探している方\n- 静的解析という言葉はわからないが、なにか惹かれるものを感じる方\n- 静的解析がしにくい例を通じていかにPerlが人間中心のプログラミング言語であるかを感じたい方"},"gsx$talktime":{"$t":"40min"},"gsx$githubid":{"$t":"mackee"}},{"gsx$blogurl":{"$t":"https://sfujiwara.hatenablog.com/"},"gsx$talktime":{"$t":"40min"},"gsx$description":{"$t":"皆さんマイクロサービスしてますか？\n\n昨今のWebアプリケーションは、内部ネットワークにある DB や KVS へのクエリだけではなく、多数の外部サービスと通信する必要が増えてきています。外部への通信は往々にして不安定で、レイテンシやエラーの発生率も高いものです。\n\n障害が発生した場合にその原因を追及したり、パフォーマンスに問題があるのでチューニングを行いたい場合には、これらの外部呼び出しの状況を可視化することが大変強力な手段になります。\n\nAWS(Amazon Web Services) X-Ray は、外部リソースへの通信をモニタリングし、解析するためのマネージドサービスです。AWS 外で動作しているアプリケーションに対しても使用できます。残念ながら Perl 用の公式 SDK は提供されていないため、AWS::XRay 等のライブラリを実装し、CPAN で公開しました。\n\nこのトークでは、分散トレーシングの概要、AWS::XRay, Plack::Middleware::XRay による実際のアプリケーション(例として ISUCON8 本選の Perl 実装)を解析する手法、どのように AWS::XRay が実装されているかの解説を行います。\n\n## 聞いてもらいたいかた\n- マイクロサービスやるぞ！というかた\n- Webアプリケーション(特に既存のPerl製のもの)のパフォーマンス解析がしたいかた\n- グラフを眺めてニヤニヤするのが好きなかた\n- Perl 用の SDK は提供されないことが多いけど頑張っていこう、というかた"},"gsx$githubid":{"$t":"fujiwara"},"gsx$startat":{"$t":"15:40"},"gsx$timestamp":{"$t":"2018/11/09"},"gsx$twitterid":{"$t":"fujiwara"},"gsx$id":{"$t":"3"},"gsx$title":{"$t":"Perlでも分散トレーシングしたい！ - AWS::XRayによる解析とその実装"},"gsx$author":{"$t":"fujiwara"},"gsx$trackid":{"$t":"track-a"}},{"gsx$description":{"$t":"Webサービスには欠かせないログ。これまでお世話になった幾千のログに感謝しつつ、これからのログに報いるために（そして運用に関わる全てのエンジニアが少しでも幸せになれるように）ログフレンドリーなDB設計を紹介します。\n本発表では、実際にFinTech系のサービスを開発する中で、ログにとって特に重要である「網羅性」「整合性」「追跡容易性」を高めるために設計を改善していった過程と、最終的に辿り着いた現時点でのベストオブ設計についてお話します。\nトピックとしてCloud Datastore、Cloud SQL、Cloud Spannerについても取り上げる予定ですが、GCPに限定される内容ではありません。"},"gsx$talktime":{"$t":"20min"},"gsx$blogurl":{"$t":""},"gsx$timestamp":{"$t":"2018/11/26"},"gsx$githubid":{"$t":"fisto"},"gsx$startat":{"$t":"15:40"},"gsx$twitterid":{"$t":"fist0"},"gsx$id":{"$t":"4"},"gsx$author":{"$t":"fist0"},"gsx$title":{"$t":"ログにやさしいDB設計"},"gsx$trackid":{"$t":"track-c"}},{"gsx$trackid":{"$t":"track-b"},"gsx$author":{"$t":"八雲アナグラ"},"gsx$title":{"$t":"レガシーPerlビルド 〜現代に蘇るPerl[1..5].0とPerl6〜"},"gsx$talktime":{"$t":"20min"},"gsx$description":{"$t":"みなさんが今使用しているPerlのバージョンはいくつですか?5.24?5.28?はたまたPerl6...? \n互換性を大事にするPerlと言っても，みなさんが今動かしているPerlはPerl5以降のものかと思います．一部Perl4のプロジェクトがあるかもしれませんが...．\nでも待ってみて下さい，なにか忘れていませんか...?\n\nそうです．Perl\"5\"と言うことは，Perl1からPerl4がかつて存在していたという事です．もし，Perl2.0やPerl3.0のソースコードが目の前にあったら動かしてみたくなりませんか?\n\nこのトークでは過去のPerlのソースコードから，動きのしくみ，そして現代のosではどのようにすれば過去のPerlが動くのかについて解説します．\nバージョンごとの特性や, C言語で書かれたPerl処理系のおもしろポイントと，年代別の修正ポイントも一気に見ていきます．\nまた, 実際にPerl1からPerl5,Perl6まで一気に走らせた場合どの様な処理速度の違いが出るのかなどについても紹介します．\n\n対象とするのはPerl1から現在の主流であるPerl5,そしてレガシーと言いつつ最先端の(?)Rakudo Perl6です．\nメインはPerl5までのPerlですが，Perl6の内部構造などについてもお話するかもしれません．\n\nアジェンダ(仮):\n- 歴代Perlの探し方\n- 歴代Perlのビルド方法\n- Perlのビルド方法の遍歴\n- Perlの内部構造について\n- Perl[1..6]のベンチマーク\n- Perl::Buildでレガシーをbuildするには\n- 一気に動かすPerl[1..6]"},"gsx$githubid":{"$t":"AnaTofuZ"},"gsx$id":{"$t":"5"},"gsx$twitterid":{"$t":"AnaTofuZ"},"gsx$blogurl":{"$t":"https://anatofuz.hatenablog.com/"},"gsx$startat":{"$t":"15:10"},"gsx$timestamp":{"$t":"2018/12/03"}},{"gsx$description":{"$t":"昨今、WEBサービスを運用するにあたり、攻撃手法の高度化に伴いサーバの防御、脆弱性対応はもちろんのこと、有事を検知する監査の仕組みも注目されるようになってきました。\n\n話し手が所属するGMOペパボでは、これまでのセキュリティ・インシデントの経験を糧にサーバ監査の仕組みやウィルス検知の仕組みの構築に力を注いでいます。\nこのセッションでは話し手が全社横断で取り組んできたサーバ監査の仕組みの構築、導入のノウハウや、実際の運用の勘所を踏まえて、知見を共有します。\n\nなお、このセッションのトピックは下記のとおりです。\n・Wazuh\n・ClamAV\n・DBクエリの保存"},"gsx$talktime":{"$t":"20min"},"gsx$githubid":{"$t":"pyama86"},"gsx$title":{"$t":"Wazuhを利用した大統一サーバ監査基盤"},"gsx$author":{"$t":"山下和彦"},"gsx$trackid":{"$t":"track-c"},"gsx$blogurl":{"$t":"https://pyama.fun"},"gsx$timestamp":{"$t":"2018/11/12"},"gsx$startat":{"$t":"14:20"},"gsx$twitterid":{"$t":"pyama86"},"gsx$id":{"$t":"6"}},{"gsx$id":{"$t":"7"},"gsx$twitterid":{"$t":"shinpei0213"},"gsx$blogurl":{"$t":"https://nekogata.hatenablog.com/"},"gsx$timestamp":{"$t":"2018/11/14"},"gsx$startat":{"$t":"14:00"},"gsx$title":{"$t":"綱渡りバッチ脱出大作戦"},"gsx$author":{"$t":"しんぺい a.k.a. 猫型蓄音機"},"gsx$trackid":{"$t":"track-c"},"gsx$description":{"$t":"わたしが関わっているサービスでは、つい最近までいわゆるバッチサーバーが冗長化されておらず、SPOFになっていました。また、バッチサーバーにジョブキューワーカーも同居しており、このサーバーが落ちるとバッチだけではなくオンラインのサービスの継続にも支障が出るような状況でした。さらに、このサーバーはアップタイムがすごいことになっており、いつ寿命を迎えてもおかしくありませんでした。さらにさらにさらに、このサーバーの構成管理スクリプトはメンテナンスされておらず、「1度死んだら2度とは立ち上がらないかもしれない……」という状態でした。しかもしかもしかもしかも、冗長化できない理由は技術的制約だけではなかったのです……。\n\n本トークでは、そんな「綱渡り」状態でサービス提供したいた状況を脱却するにあたって\n\n- どのような弊社独特の技術的制約と非技術的制約があったのか\n- どのような技術スタックを検討してみたのか\n- 結果としてどのような技術を選択したのか\n- 実際にどのように移行を進めたのか\n\nを赤裸々にお話できればと思います。"},"gsx$talktime":{"$t":"20min"},"gsx$githubid":{"$t":"Shinpeim"}},{"gsx$author":{"$t":"Dan Kogai"},"gsx$title":{"$t":"型にはまらない型の話"},"gsx$trackid":{"$t":"track-b"},"gsx$talktime":{"$t":"20min"},"gsx$description":{"$t":"プログラミングの話をすると二言目には型(type)の話になるものですが、それでは型とは一体なんでしょう?楽に楽しく型について、時間の許す範囲でカタります。\n\n* 型の意味=型は意味\n* Typeは楽、Typingは楽しい\n* Perl5が愛され嫌われる理由\n* Perl6:楽土は楽か?\n* 型推論=いいとこ取り?"},"gsx$githubid":{"$t":"dankogai"},"gsx$id":{"$t":"9"},"gsx$twitterid":{"$t":"dankogai"},"gsx$blogurl":{"$t":"http://blog.livedoor.jp/dankogai/"},"gsx$startat":{"$t":"11:20"},"gsx$timestamp":{"$t":"2018/11/17"}},{"gsx$startat":{"$t":"14:50"},"gsx$timestamp":{"$t":"2018/11/20"},"gsx$blogurl":{"$t":"https://gugod.org"},"gsx$twitterid":{"$t":"gugod"},"gsx$id":{"$t":"10"},"gsx$githubid":{"$t":"gugod"},"gsx$talktime":{"$t":"20min"},"gsx$description":{"$t":"PPIやPerl :: Criticなどのツールを使って、\nPerlプログラムを変更するPerlプログラムを書くのが簡単になりました。\n非自明なケースでは、ボットにコードレビューをさせることもできます。\n"},"gsx$trackid":{"$t":"track-b"},"gsx$title":{"$t":"PerlプログラムでPerlプログラムを修正する方法"},"gsx$author":{"$t":"Kang-min Liu"}},{"gsx$id":{"$t":"11"},"gsx$twitterid":{"$t":"ytnobody"},"gsx$blogurl":{"$t":"https://ytnobody.net"},"gsx$startat":{"$t":"16:00"},"gsx$timestamp":{"$t":"2018/11/20"},"gsx$trackid":{"$t":"track-b"},"gsx$author":{"$t":"わいとん"},"gsx$title":{"$t":"実演 サーバレスPerl - 顔認識データを扱おう"},"gsx$talktime":{"$t":"20min"},"gsx$description":{"$t":"## このトークについて\n\n最近よく耳にする「サーバレス」という言葉ですが、Perlとはあまり縁のない話に感じているのではないでしょうか。\n\nこのトークでは、Microsoft Azure Functionsを駆使してPerlを動かし、顔認識データを取り扱うまでの流れをライブコーディングしながら解説していきます。\n\n## このような方にオススメ\n\n* Perlとサーバレスの組み合わせを実際に目の当たりにしたい方。\n* サーバやVMのお守りから、ひととき、フォーカスを外したい方。\n* 最小限のモジュールでできる事の一端を垣間見たい方。\n\n## トーク内容の難しさ\n\nMicrosoft Azureの概念について、若干難易度があるかもしれませんが、Perlについて詳しい必要はありません。\n\nプログラミング経験のない方にはわかりにくい側面があります。\n\n## その他\n\nライブコーディングで20分というのは非常に短いですので、かなりスピーディな発表となる可能性があります。"},"gsx$githubid":{"$t":"ytnobody"}},{"gsx$id":{"$t":"12"},"gsx$twitterid":{"$t":"risou"},"gsx$blogurl":{"$t":"blog.risouf.net"},"gsx$timestamp":{"$t":"2018/11/21"},"gsx$startat":{"$t":"11:40"},"gsx$title":{"$t":"Perl 6 でのアプリケーション開発と実用"},"gsx$author":{"$t":"risou"},"gsx$trackid":{"$t":"track-b"},"gsx$description":{"$t":"Perl 6 で CLI のアプリケーションを自作して、常用するようになるまでの経験をベースに、最近の Perl 6 の状況や Perl 6 でのプログラミングへの入門に参考になりそうな事柄を整理してお話します。\n以下のような内容を想定しています。\n* 環境構築\n* モジュールの扱い方\n* CLI アプリケーションの開発\n* 入門に適したサイトの紹介"},"gsx$talktime":{"$t":"20min"},"gsx$githubid":{"$t":"risou"}},{"gsx$id":{"$t":"14"},"gsx$twitterid":{"$t":"ikasam_a"},"gsx$startat":{"$t":"16:50"},"gsx$timestamp":{"$t":"2018/11/22"},"gsx$blogurl":{"$t":""},"gsx$trackid":{"$t":"track-b"},"gsx$author":{"$t":"ikasam_a"},"gsx$title":{"$t":"10年モノ熟成Perlその後"},"gsx$githubid":{"$t":"masaki"},"gsx$talktime":{"$t":"20min"},"gsx$description":{"$t":"2年前の YAPC::Hokkaido 2016 で「10年モノ熟成Perlとの付き合い方」というタイトルで、Perlで書かれた10年選手のシステムを運用するにあたり、現状認識・歴史理解・問題発生・課題解決といったことをどうやっているかというお話をしました。\n\nそこから2年の月日が流れ、システムを取り巻く環境で変わったことと変わらないこと、自分自身のシステムやサービスに対する理解度と考え方の変化、最近のシステムとの付き合い方、そしてさらに今後の展望など、実体験から得られたことを交えて、自分とシステムの2年分のアップデートをお話します。"}},{"gsx$trackid":{"$t":"track-a"},"gsx$author":{"$t":"Songmu"},"gsx$title":{"$t":"多くのCPAN Authorに育てられ、息をするようにCPANモジュールを書けるようになり、そして分かったこと"},"gsx$description":{"$t":"私は、Perlコミュニティに育てられ、一角のエンジニアとなることができました。\n\n多くのCPAN AuthorからOSSの作法を学び、CPANやGitHubで泳げるようになりました。そして数多くのCPANモジュールを作成しました。その経験は現在、他の言語でツールやモジュールを作る上でも活かされています。\n\nその経験を踏まえ、私が気づいたことや学んだことについて話します。またそれらの経験が今の業務にどの様に活かされているか、OSSをどの様に仕事に活用していくか、などについても取り上げます。\n\n具体的には以下のようなトピックを取り上げます。\n\n- OSSコミュニティがどの様に成長し、どの様に人を育てるのか、\n- 「普通の」エンジニアがOSSに貢献する方法や\n- 良い車輪の再発明、悪い車輪の再発明\n- OSSフリーライダー問題\n- 業務でどうOSSに関わるか\n- エンジニア向けSaaSを運営する上で、どの様にOSSを戦略的にやるか"},"gsx$talktime":{"$t":"20min"},"gsx$githubid":{"$t":"Songmu"},"gsx$twitterid":{"$t":"songmu"},"gsx$id":{"$t":"15"},"gsx$blogurl":{"$t":"http://www.songmu.jp/riji/"},"gsx$timestamp":{"$t":"2018/11/25"},"gsx$startat":{"$t":"16:50"}},{"gsx$twitterid":{"$t":"__papix__"},"gsx$id":{"$t":"19"},"gsx$blogurl":{"$t":"https://papix.hatenablog.com/"},"gsx$timestamp":{"$t":"2018/11/27"},"gsx$startat":{"$t":"11:20"},"gsx$title":{"$t":"チームが前に進み続けるために僕たちが考えたこと"},"gsx$trackid":{"$t":"track-c"},"gsx$author":{"$t":"papix"},"gsx$description":{"$t":"\"モノをつくる\"という過程において, 常に順風満帆であり続けることはないでしょう.\n何か調子が良くない, 何故かうまくいかない. チームとして前に進めていない... そう感じる時があるかもしれません.\n\nまさに自分が, 所属しているチームでそういった雰囲気を感じ始めた時, チャレンジしたのが｢スクラム｣でした.\nエンジニアとスクラムマスターを兼業し, スクラムの導入によって, チームが前に進み続けられるよう, 試行錯誤を始めました.\n\nこのトークでは, 業務の中で直面した課題や壁に対して, スクラムを導入してどのように立ち向かっていったのか,\nそしてそれによって, チームがどう変わって, それに伴ってスクラムの様子がどう変わっていったのかを軸に, 今所属しているチームにおけるスクラムの様子を, ありのままにお伝えします.\n\n具体的には, 以下のような話題が含まれる予定です:\n\n- 感じていた停滞感\n- スクラムを導入するまでのアクション\n- スクラムイベントのご紹介 〜はてなブログMediaチームの場合〜\n- スクラム導入の成果\n- スクラムでチームが変わって, チームがスクラムを変えていく\n- ｢ゴールを目指す｣スクラムと｢前に進み続ける｣スクラム\n- 自分たちの今後の展望と課題\n\n兼業スクラムマスターが孤軍奮闘している一事例として, お聞き頂けると幸いです."},"gsx$talktime":{"$t":"20min"},"gsx$githubid":{"$t":"papix"}},{"gsx$blogurl":{"$t":"https://blog.sushi.money"},"gsx$talktime":{"$t":"20min"},"gsx$description":{"$t":"発表者は普通のウェブ技術者ですが、近年のVR化の波に呼応して、日々VRコンテンツを作って遊んでいます。\nここ半年ほどでいくつかWebVRを使った作品を作ってきました。\n先日は「メディアを問わず、どんな本でも購入できる」がコンセプトのブックフェア「TRANS BOOKS」にて自著を販売すると共にVRコンテンツを展示し、来場した老若男女に遊んでもらいました。\nここ半年ほどの活動から、ウェブ技術者に向けた知見をお話します。\n\n## アジェンダ\n- WebVRについて、フレームワークや開発方法について、これまでに作ったものを交えながら紹介\n- 普通のウェブ空間から連続的にVR空間に向かうためのアプローチ\n- デバイスを安定して展示するためのノウハウ\n- 物理的な展示におけるグロースハック\n\n## このトークのゴール\n- WebVRを使ったVR作品を今すぐ作れるようになる\n- WebVRを使ったVR作品をイベントで展示できるようになる"},"gsx$githubid":{"$t":"hitode909"},"gsx$startat":{"$t":"15:40"},"gsx$timestamp":{"$t":"2018/11/27"},"gsx$id":{"$t":"20"},"gsx$twitterid":{"$t":"hitode909"},"gsx$trackid":{"$t":"track-b"},"gsx$title":{"$t":"WebVRで作品を作って展示しよう"},"gsx$author":{"$t":"hitode909"}},{"gsx$twitterid":{"$t":"karupanerura"},"gsx$id":{"$t":"26"},"gsx$timestamp":{"$t":"2018/12/02"},"gsx$startat":{"$t":"16:30"},"gsx$blogurl":{"$t":"https://techblog.karupas.org/"},"gsx$author":{"$t":"karupanerura"},"gsx$title":{"$t":"ISUCON8予選問題作成の裏側"},"gsx$trackid":{"$t":"track-a"},"gsx$githubid":{"$t":"karupanerura"},"gsx$description":{"$t":"ISUCONとはIikanjini Speed Up CONtestの略で、アプリケーションからOSレイヤまでなんでもありのWebアプリケーションの総合的な高速化スキルを競うコンテストです。2018年で第8回目の開催となり、参加者数は1000人を超えます。本年度の出題はDeNAとカヤックでした。僕はDeNAのエンジニアの一人としてISUCON8予選の問題作成に携わりました。\n\nISUCONの問題の提供のためには、参照実装（具体的な問題）の作成、ベンチマーカーの作成、競技を成立させるための最低限の制約であるそしてそれが十分に高速化できることを示すための模範解答の作成が必要です。ISUCON8の予選問題はPerlで最初に参照実装が作成されました。そして、模範解答も実はPerlで作成されています。そして、その参照実装が各言語へ移植されて競技で各言語ごとに様々なチューニングが行われました。\n\nその過程で様々な学びを得ました。たとえば、ISUCONのような競技で気を遣うべきポイントはなにか、どのようにして問題を考えていくと良いのか、どのようにしてブラックボックスとなっているアプリケーションが仕様を満たしているかをテストするとよいのか。極限までチューニングする上でどのようにプロファイリングするとよいのか。他言語移植においてどのようなポイントで問題が起きるのか。などといったものです。\n\nこのセッションではISUCON8予選問題の作問の過程から、どのような学びを得たかについて語ります。"},"gsx$talktime":{"$t":"20min"}},{"gsx$twitterid":{"$t":"duck8823"},"gsx$id":{"$t":"28"},"gsx$trackid":{"$t":"track-c"},"gsx$author":{"$t":"前田隼輔"},"gsx$title":{"$t":"私とOSS活動とPerl"},"gsx$description":{"$t":"私とPerlとの出会いは大学院です。専門は生命科学だったため当時はモジュールといった知識もなく、複数のスクリプトをパイプで繋ぐといったことしていました。\n\n新卒で入社した会社は主にJavaで開発していました。そこで知識を得たオブジェクト指向を取り入れ、Perlでのモジュール開発をはじめました。\n\n私の初めてのカンファレンス参加は YAPC::Asia Tokyo 2015 でした。発表者が皆いきいきとしていたことを覚えています。その後、GitHubと出会い個人開発したソースコードの公開をはじめました。\n\n初めてStarを頂いたGitHubのリポジトリは、CPANで公開したPerlのモジュールでした。初めて Issue や Pull Request も頂きました。\n初めての転職の際には、そのリポジトリが決め手となり内定を頂くことができました。\n\n以降、少しずつOSS活動をしており現在はGolangでCIを個人開発しています。開発中のリポジトリでは JetBrainsの OSS License が承認されました。\nIntelliJ IDEA では 非公式ですが強力な Perl Plugin があり、Perlでの開発にも役立ちます。\n\nそんな取り留めのない「私とOSS活動とPerl」のお話を通じてOSS活動の魅力をお伝えしたいと思います。"},"gsx$talktime":{"$t":"20min"},"gsx$blogurl":{"$t":"http://blog.duck8823.com/"},"gsx$timestamp":{"$t":"2018/12/03"},"gsx$githubid":{"$t":"duck8823"},"gsx$startat":{"$t":"11:40"}},{"gsx$id":{"$t":"31"},"gsx$twitterid":{"$t":"yoku0825"},"gsx$blogurl":{"$t":"https://yoku0825.blogspot.com/"},"gsx$startat":{"$t":"16:30"},"gsx$timestamp":{"$t":"2018/12/03"},"gsx$author":{"$t":"yoku0825"},"gsx$trackid":{"$t":"track-c"},"gsx$title":{"$t":"Dive into MySQL Error"},"gsx$talktime":{"$t":"40min"},"gsx$description":{"$t":"- MySQLのエラーコードについてのお話です\n- MySQLのエラー番号には一定のルールがあり、それを知ることでピンチの時の切り分けに役立つかも知れません\n- また、エラーログドリブンでMySQLのソースコードを読むきっかけを作る話もします"},"gsx$githubid":{"$t":"yoku0825"}},{"gsx$author":{"$t":"akiym"},"gsx$trackid":{"$t":"track-c"},"gsx$title":{"$t":"CPAN Module Hacks"},"gsx$id":{"$t":"38"},"gsx$twitterid":{"$t":"akiym"},"gsx$startat":{"$t":"16:00"},"gsx$githubid":{"$t":"akiym"},"gsx$timestamp":{"$t":"2018/12/03"},"gsx$blogurl":{"$t":"https://blog.akiym.com/"},"gsx$talktime":{"$t":"20min"},"gsx$description":{"$t":"CPANモジュール使っていますか。アプリケーションの依存モジュールをどのように管理するべきなのか迷ったことがありますか。CPANにモジュールをpublishしようと思って放置していることはありますか。\nこのトークではCPANモジュールの作成から公開、そして管理まで以下の項目を元にお話しします。\n\n- metacpanの歩き方\n- CPANにモジュールをpublishする\n- Carton/cpmでパッケージ管理\n- cpanfile.snapshotの生成に立ち向かう\n- Amazon S3におくだけのプライベートCPANを作る\n- cpan-auditで脆弱性のあるモジュールを検査する"}},{"gsx$author":{"$t":"suzuki"},"gsx$trackid":{"$t":"track-c"},"gsx$title":{"$t":"自前運用のZabbixからマネージド監視サービスMackerelへ - ソーシャルゲームタイトルのサーバ監視の移行事例"},"gsx$id":{"$t":"39"},"gsx$twitterid":{"$t":"jet_zousan"},"gsx$timestamp":{"$t":"2018/12/03"},"gsx$startat":{"$t":"14:50"},"gsx$githubid":{"$t":"dozen"},"gsx$description":{"$t":"弊社ではZabbixでサーバ監視を行ってきましたが、自前運用のZabbixサーバにかかる運用コストが問題になっていました。\nこの問題をマネージドなサーバ監視サービス Mackerel の導入によって解決しようとしています。\n\n本トークではそれらの取組のうち、自社ソーシャルゲームタイトル「僕らの甲子園ポケット（以下ぼくポケ）」におけるZabbixからMackerelへのサーバ監視の移行事例について話をさせていただければと思います。\n\n具体的には以下のような内容となる予定です\n- 監視・メトリクスの移植\n- アラートではないが通知はほしいケースへの対処方法\n- Mackerelならではの便利な機能\n- オートスケールやプロビジョニングとmackerel-agentをうまく付き合わせるための工夫\n- 本家のrepoへPRを送って積極的に改善していく\n- github.com/ryotarai/waker と連携したアラートエスカレーション\n- 自作プラグイン・ツールを利用した柔軟な監視\n- サーバ以外の監視: アラート通知の変更を通知して誤操作に気づけるようにする\n- mackerelをservice discoveryとして活用して深刻な障害時に緊急メンテを入れる"},"gsx$blogurl":{"$t":""},"gsx$talktime":{"$t":"40min"}},{"gsx$twitterid":{"$t":"xaicron"},"gsx$id":{"$t":"40"},"gsx$blogurl":{"$t":"https://xaicron.hatenablog.com/"},"gsx$timestamp":{"$t":"2018/12/03"},"gsx$startat":{"$t":"12:10"},"gsx$trackid":{"$t":"track-a"},"gsx$title":{"$t":"Perl to Go"},"gsx$author":{"$t":"xaicron"},"gsx$description":{"$t":"Perl を仕事で10年ぐらい書いていていろんな Web API 作って来たおじさんが、Go で Web API を書いた時の奮闘記です。\n\nPerl と Go は全く違う言語に思うかもしれませんが、意外と似ているところもあったりします。\n実際にPerl で使っているさまざまなエッセンスを Go でも活用できたりします。\n\nこのトークでは Perl と Go の相違点や類似点を交えながら、認証機構やデータベースを用いた本格的な Web API を書く上でのポイントや便利なライブラリを紹介します。\nまた、Web API といえば Test が書きやすいということで書かずにはいられませんね。Go での Test 手法についても例を交えながら紹介したいと思います。\n\nこのトークを聞けば明日から Go をスラスラと書けるようになること請け合いです。"},"gsx$talktime":{"$t":"40min"},"gsx$githubid":{"$t":"xaicron"}},{"gsx$talktime":{"$t":"20min"},"gsx$description":{"$t":"自分のPerlとの出会いとこれからのPerlとの付き合い方について、\n古くからのシステムの当時を振り返りながら、\n懐かしの話や失敗談なども踏まえつつ、これからのPerlの付き合い方について考えようと思います。\n\n- Perlとの出会い\n- WEB 2.0時代\n- ガラケー時代\n- CGI/mod_perl/Plack\n- 当時の失敗談（UTF-8フラグなど）\n- ワンライナー\n- レガシー環境とPerl\n- DockerでPerlを小さく使う\n- クラウド時代のPerl\n- テキスト処理言語としてのPerl\n"},"gsx$githubid":{"$t":""},"gsx$title":{"$t":"レガシーPerlと、Perlのこれから"},"gsx$trackid":{"$t":"track-b"},"gsx$author":{"$t":"teckl"},"gsx$blogurl":{"$t":"https://dev.teckl.net/"},"gsx$startat":{"$t":"16:30"},"gsx$timestamp":{"$t":"2018/12/18"},"gsx$twitterid":{"$t":"teckl"},"gsx$id":{"$t":"43"}},{"gsx$githubid":{"$t":"lyokato"},"gsx$description":{"$t":"2010年前後、メッセージングの標準規格であるXMPPプロトコルを利用するためのフレームワーク、Perl Oceanを開発しました。(参考: https://alpha.mixi.co.jp/entry/2012/11135/)  また、2017年になり、再度メッセージングサービスを設計する機会を得ることが出来ましたが、このときは標準規格であるXMPPは採用せず、独自のプロトコルでの設計を行いました。サーバー実装の言語はElixirです。これらの経験から得られた知見として、標準としてのXMPPの概要、そして、いまやレガシーとなってしまい現代の要件に合わない部分を合わせて解説し、これからのサービス開発でメッセージング機能が必要になった際の、設計の指針とできる情報を提供できればと思います。"},"gsx$talktime":{"$t":"40min"},"gsx$trackid":{"$t":"track-c"},"gsx$title":{"$t":"メッセージングのプロトコル"},"gsx$author":{"$t":"加藤亮"},"gsx$timestamp":{"$t":"2018/12/03"},"gsx$startat":{"$t":"12:10"},"gsx$blogurl":{"$t":"https://medium.com/@lyokato"},"gsx$twitterid":{"$t":"lyokato"},"gsx$id":{"$t":"44"}}]}}
