id,title,description,talkTime,author,githubId,twitterId,blogUrl,timestamp,trackId,startAt
1,2018年春のPerl,Perl 5.28で入る新機能の紹介などのPerlの最新情報や、現在のPerl 5/6の状況を簡単にまとめていきます。,40min,karupanerura,karupanerura,karupanerura,http://techblog.karupas.org/,2017/11/29,track-a,15:10
4,GraphQL をプロダクション導入した結果,"REST API にとって変わるんじゃないかと言われている GraphQL ですが（おそらく初めて！）クローズドβではありますがプロダクション導入しました。

このトークでは以下のことについて触れられればと思います。

- そもそも GraphQL ってなんだっけ？
- GraphQL のサーバ / クライアントそれぞれの実装方法について
- パフォーマンス面について（キャッシュとか）
- テストってどうやって書くの？

今後 GraphQL を導入しようと考えている方、導入直後の方の参考になれば幸いです。",40min,仁多見 遼,rnitame,bird_tummy,http://rnitame.hatenablog.com,2017/12/17,track-b,10:50
5,Webサービスを監視するときに僕達が考えたこと,"Webサービスを開発し, 運用していると, 様々な出来事が生じます.
何らかの要因によるリクエスト数の上昇があったり, サーバーやネットワークの疎通が急に止まったり, 或いは利用している外部サービスで障害が発生したり...
そういった時に, サービスの異常事態にいち早く気付き, 迅速に対応するためには, Webサービスをしっかりと｢監視｣していくことが重要です.

本トークでは, Webサービスの｢監視｣と｢通知｣そして｢対応｣という3つの視点から, ｢Webサービスを運用していく｣ことについて考察します.
その中で, ｢監視｣と｢通知｣を実現する道具として, 株式会社はてなが提供するサーバー監視SaaS｢Mackerel｣を題材とする予定です.
また, ｢はてなブログ｣を題材とした, Mackerelを利用したWebサービス監視の実情などもお話出来ればと思っています.

具体的には, 以下のような話題が含まれる予定です:

- なぜ｢監視｣が必要なのか?
- サービスに這い寄る障害達
- ｢監視｣と｢通知｣と｢対応｣の車輪を回そう
- どこまで通知する? 〜狼少年にならないために〜
- Mackerelを活用したWebサービスの監視
- Webサービスの監視の現場 〜はてなブログの場合〜

このトークをきっかけに, ｢Webサービスの監視｣について, 皆さんと一緒に理解を深められると嬉しいです.",40min,papix,papix,__papix__,http://papix.hatenablog.com/,2017/12/28,track-b,10:00
6,High (Availability|Performance) WebSocket for Perl Real-Time Application,"実は難しい大規模WebSocketサーバ、だけれどミドルウェアとアプリの役割を分離すればうまくいくよって話をします。

このトークでは、WebSocketをスケール可能にし、従来のPerl製Webアプリケーションからも容易に扱うために生まれたOSSミドルウェア「kuiperbelt」を通して得られた知見や、リアルタイム通信を含んだゲームアプリに適用する際のハードルや解決方法について話していきます。

このトークの対象者
* PerlやRubyなどのPrefork型アーキテクチャだけれどWebSocketを簡単に扱いたい
* どの部分を切り出してマイクロサービスとして適用するとうまくいくかを知りたい

このトークで話さないこと
* kuiperbeltのGo特有の苦労したことあれこれ

このトークでは以下の内容が含まれます。
* 永続的接続に対するPrefork型アプリケーションの限界
* なぜkuiperbeltはPerlアプリケーションのために生まれてきたか
* プロセスを分離してデプロイやスケールイン時にも切断しない方法
* WebSocketサーバの先行研究と比較
* 土管としてのミドルウェア, コアを小さく周辺ミドルウェアを増やす戦略",40min,macopy,mackee,mackee_w,http://mackee.hatenablog.com/,2017/12/18,track-a,14:20
10,ノンプログラマーのプログラミング活用法 / The Non-Programmer's Programming Techniques,"# TL;DR
- プログラミングを職業としない人（ノンプログラマー／非エンジニア）がプログラミングの基礎を習得すると、普段の仕事がどうなるのかを紹介します。

# I. 概要
- 日々の様々な雑事を効率化するには、プログラミングの技術が役立ちます。
- たとえば、ターミナルでカレントディレクトリを移動したり、findでファイルを探したり、grepで任意のディレクトリ下のファイルから特定の文字列を検索したり。
- こういった技術は、プログラミングをする人にとっても勿論有用だと思われますが、たとえば編集者やライター、あるいは事務方のような、プログラミング以外の仕事をする人にも大いに役立つものでしょう。
- しかし従来、そうした「プログラミング以外の場でも使える、プログラミングの技術」を生み出し、伝道してきたのはプログラマーの人々であり、またそれゆえに、そうした技術がノンプログラマーに伝わる機会も限られたものであったと思われます。
- 一方、普段編集の仕事をしている私は、趣味としてプログラミングを学ぶ中で、そうした技術を自分なりに身につけてきました。そこで実践されているノウハウは、プログラマーが行うそれに比べれば稚拙で、非効率なものかもしれませんが、それでもそのような立場だからこそ、プログラマーとノンプログラマーとの間に立つ技術を伝えられるのではないかと考えています。
- 今回のトークでは、そうした観点から、DEMOなどを通してなるべく具体的な事例を紹介していきたいと思います。

# II. 対象聴者
- 「ノンプログラマーがプログラミングを学ぶことで、普段の作業をどのように効率化できるのか」を示すという意味で、ノンプログラマーに役立つ内容になると思います。
- ノンプログラマーがプログラミングの技術を用いて普段の仕事をする様子は、プログラマーの人にとっても新鮮な内容になるかもしれません。

# III. おもなトピック（候補／以下を軸に適宜構成します）
## 第1部 シェル（bash）
- ターミナルを使うと何ができるのか
- .bashrcにエイリアスを設定する
- 関数の作り方、Perlとの連携
- bashで作った自分のツール

## 第2部 Vim
- 二つの文章の差分を迅速明快にチェックする
- 編集時に生じた不要な文章や段落を画面分割で作った一時退避場所に仮置きする
- IDE的画面構成を用いて、離れたチャプターやセクション間を自在に移動する
- その他の便利なプラグイン

## 第3部 Perl
- Perl入学式で基礎文法を学ぶ
- Perlの基礎でできること（オブジェクト指向以前）
- シェルとの連携
- リファレンスの理解法
- モジュールをuseする
- くり返し練習する方法
- Perlで作った自分のツール

## 第4部 Excel / Google Spreadsheet
- Perlで学んだ知識を活かす
- Excel関数でできること",40min,門松宏明,note103,note103,http://note103.hateblo.jp/,2017/12/26,track-b,15:10
12,Perlを中心としたワンライナーあれこれ,"日々運用・開発をしている中で知っているとすぐにでも役に立つワンライナーについて、
Perlを中心として入門的なところからネタ的なシェル芸まで薄く紹介できればと思います。（まだ内容未定です。。）

## 対象者
- ワンライナーを余り使っていない方
- CUI（シェル）をこれから使っていきたい方

## 話す内容
- 実用的なワンライナー集
- UNIXという考え方
- 簡単レシピ
- ログ解析
- 運用成分多め
- ネタ的なものが出来れば
- 時間が余ればPerl入学式企業出張版（in シーサー株式会社）の報告なども？",20min,teckl,,teckl,,2017/12/28,track-b,14:20
13,MogileFS脱出大作戦,自前運用のMogileFSに保存された1600000000個のファイルをAmazon S3へ移行する話をします。移行の際考慮すべきことや方法論、ハマりどころ、要求されるマインドなどをお話したいと思います。,40min,t_kyt,,t_snzk,http://blog.yux3.net/,2017/12/28,track-b,13:30
14,そろそろPerlでのHTTP/2について触れたい,"HTTP/2のRFCが文書化されてから幾ばくかのときが流れました。
しかし、PerlでHTTP/2を使ってるよ〜んって話をあんまり聞きません。（個人の感想です）
メリットが無いのでしょうか？
このトークではHTTP/2の基本的なことをざっくりと話しつつ、Perlで実際にHTTP/2を使うにはどうすればいいのかを解説します。
また、実際にどういった場面で利用するとよいのか。メリット・デメリットを考察します。
最後に、余力があればPerlでgRPCを利用する方法について検討したいと思います。",40min,xaicron,xaicron,xaicron,http://xaicron.hatenablog.com/,2017/12/28,track-a,11:40
15,Inlineモジュールの世界,"みなさんPerlを使っていますか？　使っていますね．
とはいえそこそこ規模感のあるプロジェクトをやっているとPerlだけで完結するという状況は珍しいでしょう．多くの場合は何らか他の言語とのつなぎ込みが必要となります．
あるいはPerlが得意ではない処理をなんとかする必要に迫られるというシチュエーションもあると思います．例えば数値解析とか……

そういう時に我々はどうすべきか？
もちろんInline::*ですね．

PerlにはPerlコード中に他の言語を埋め込んで実行するInlineモジュールという魔法が存在します．例えばPerlのコード中にPythonコードを埋め込んで，Perlのランタイムで実行するということが可能となるのです．これだけ聞くとまるで使い物にならない，おもちゃのような機能のようにも思えるかもしれませんが，じつは実用性のある素晴らしい機能なのです！
本トークではデモを交えながらのInlineモジュールの紹介・解説を行い，ならびにグルー言語としてのPerl5，Perl6の可能性について論じたいと考えています．",20min,moznion,moznion,moznion,http://moznion.hatenadiary.com/,2017/12/28,track-b,16:00
16,Perlコーディングテクニック2018,"Perlを幸せに扱うべく、ハマりポイントを回避するためのコーディング規則や最近のイケているモジュールを使ったり、IDE的支援が受けられないPerlでリファクタリングを行う方法など、2018年におけるモダンなPerlを書くテクニックを紹介します。

- Perlハマりポイントn選
- クラスビルダをふりかえる
    - Moo, Mouse, ...
- Type::Tinyを使って型を使う
    - Smart::Args::TypeTiny, Params::ValidationCompiler
- 近代的export術
- クラスローダー
- Crypt::OpenSSL::RSAにさよなら
- 2017年のattribute
- 新しいPerlの機能を使う
    - postfix dereference
- リファクタリング
    - App::PRT
    - PPIを使ってリファクタリングツールを作る",20min,akiym,akiym,akiym,http://akiym.hateblo.jp/,2017/12/28,track-b,16:25
17,WordPress運用を支えるPerl,"PHP を中心に起こったCMS戦国時代も、WordPress がデファクトスタンダードとなったことにより落ち着きを取り戻しました。

ITエンジニアが手軽にブログを開設しようとした場合、機能豊富な ASP ブログサービス、そして MovableType や GitHub Pages を利用した静的ウェブホスティングが無難な選択肢となることが多いでしょう。しかし、デザイナー主体で機能やデザインにこだわったブログを作成する場合、デザイナー側から見てノウハウが豊富な WordPress が第一候補として取り上げられることもよくある光景です。

動的生成の WordPress は、セキュリティや過負荷といった悩み事を抱えやすく、ときにITエンジニアから忌避されるアプリケーションでもあります。ただ、デザイナーの意見を尊重して一緒に素晴らしいブログサイトの作成をお手伝いするのも、ITエンジニアとしてやりがいのある仕事だと感じます。

このトークでは、パフォーマンス・セキュリティ・スケーラビリティの3つの観点から、CMS の WordPress をAWS クラウド上に構築するための手法を探っていくことにします。

もちろん WordPress は PHP 製であり、また AWS は Perl の API ライブラリを公開していません。それでも、だいたいどこにもインストールされていて、各種ツールを糊のように気軽にくっつけて連携できることは Perl の魅力といえるでしょう。

奇をてらった構成ではなく、至極オーソドックスな構成のご紹介となりそうですが、その中で「ベターシェルスクリプト」「Glue 言語」としての Perl から、これは Perl ならではと膝を打ってしまうことまで、ご紹介できればと考えています。",20min,OGATA Tetsuji,xtetsuji,xtetsuji,http://post.tetsuji.jp/,2017/12/28,track-b,14:40
18,Everything You Always Wanted to Know About Numbers But Were Afraid to Ask,"Before AI, before movies, before pictures, even before text.  Numbers are what we use computers for.  If so why is it *the least* portable data type?

* `0.1+0.2 != 0.3` -- is it really true?
* What's '%a'? Why should you care?
* What does [VALU] has to do with it?
* JSON,  What's wrong with you?
* Perl does numbers.  But do you have any idea how funny it does?
* Perl 6, the newest hope, the latest disappointment
* …

[VALU]: https://valu.is",20min,Dan Kogai,dankogai,dankogai,http://blog.livedoor.jp/dankogai/,2017/12/28,track-b,17:15
19,全部Perlが教えてくれたこと,このトークでは、Perlから教えてもらったオープンソースやコミュニティといったものへの関わり方、それを広めていく方法などを交え、沖縄のITコミュニティの現状をお伝えするとともに、若いエンジニアたちへの声援を送りたいと思います（オサーンは多分聞いても面白くないと思います！）。,40min,西島 幸一郎,k-nishijima,k_nishijima,https://medium.com/@k_nishijima,2017/12/28,track-b,11:40
20,Perl6のエコシステム,"2015年クリスマス、Perl6がリリースされました。
リリース当初、モジュール管理は https://github.com/perl6/ecosystem にて行われていました。そこにPull Requestベースでモジュールが追加され、インデックスを作っていたのです。

それが2017年には、モジュールの配布場所はgithubからPAUSE/CPANへ、
インストーラーはpandaからzefへ、それぞれ移ってきています。

本トークではこうしたPerl6エコシステムの現状をお伝えしたいと思います。",20min,Shoichi Kaji,skaji,shoichikaji,,2017/12/28,track-b,16:50
22,HTTP/2にまつわる事実と誤解,HTTP/2についての正しい理解と残された課題について解説します,40min,Kazuho Oku,kazuho,kazuho,http://blog.kazuhooku.com/,2017/12/29,track-a,10:50